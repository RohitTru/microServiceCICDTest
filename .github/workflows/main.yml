name: Build & Deploy Feature Apps

on:
  push:
    branches:
      - "feature-*"
  delete:
    branches:
      - "feature-*"

jobs:
  build-feature-app:
    name: Build & Deploy Feature App
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Ensure Docker Network Exists
      - name: Ensure Docker Network Exists
        run: |
          if ! docker network inspect app-network > /dev/null 2>&1; then
            echo "Creating app-network..."
            docker network create --driver bridge app-network
          else
            echo "app-network already exists."
          fi

      # 3. Extract Branch Name
      - name: Extract Branch Name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      # 4. Create App Folder and Generate .env
      - name: Create App Folder from Template and Generate .env
        run: |
          echo "Creating app folder for ${{ env.BRANCH_NAME }}"
          if [ ! -d "./${{ env.BRANCH_NAME }}" ]; then
            echo "Creating app folder for ${{ env.BRANCH_NAME }}"
            mkdir -p ./${{ env.BRANCH_NAME }}
            rsync -av --exclude 'microservice-env-template.env' ./app-template/ ./${{ env.BRANCH_NAME }}/
          else
            echo "App folder already exists."
          fi

          # Generate .env file for the app
          cat <<EOF > ./${{ env.BRANCH_NAME }}/.env
          APP_NAME=${{ env.BRANCH_NAME }}
          APP_IMAGE=rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest
          APP_PORT=$((5000 + RANDOM % 1000))
          REDIS_HOST=redis
          EOF

          echo "Generated .env file for ${{ env.BRANCH_NAME }}:"
          cat ./${{ env.BRANCH_NAME }}/.env

      # 5. Commit and Push App Folder to GitHub
      - name: Commit and Push App Folder to GitHub
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "Add app folder and .env for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin HEAD:${{ env.BRANCH_NAME }}

      # 6. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 7. Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest \
          --build-arg BUILD_TIMESTAMP=$(date +'%Y%m%d%H%M%S') ./${{ env.BRANCH_NAME }}

      # 8. Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest

  # Remove Sandbox when Branch is Deleted
  cleanup:
    if: github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      # 1. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 2. Extract Branch Name
      - name: Extract Branch Name
        run: echo "BRANCH_NAME=${{ github.event.ref }}" >> $GITHUB_ENV

      # 3. Remove Docker Image and Sandbox
      - name: Remove Docker Image and Sandbox
        run: |
          echo "Cleaning up sandbox for ${{ env.BRANCH_NAME }}"

          # Remove the running container if it exists
          docker rm -f ${{ env.BRANCH_NAME }} || true

          # Remove the Docker image locally
          docker rmi rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest || true

          # Remove the image from Docker Hub
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
            -u "${{ secrets.DOCKER_HUB_USERNAME }}:${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" \
            "https://hub.docker.com/v2/repositories/rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}/")

          if [ "$RESPONSE" -eq 202 ]; then
            echo "Successfully deleted image from Docker Hub."
          elif [ "$RESPONSE" -eq 404 ]; then
            echo "Image not found on Docker Hub, skipping deletion."
          else
            echo "Failed to delete image from Docker Hub. HTTP status: $RESPONSE"
          fi

      # 4. Conditionally Remove Docker Network
      - name: Remove Docker Network (if unused)
        run: |
          if [ -z "$(docker ps -q -f network=app-network)" ]; then
            echo "No containers using app-network. Removing it..."
            docker network rm app-network || true
          else
            echo "Containers are still using app-network. Skipping removal."
          fi
