name: Build & Deploy Feature Apps

on:
  push:
    branches:
      - "feature-*"
      - "staging"
      - "master"
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - "staging"
      - "master"
  delete:
    branches:
      - "feature-*"

jobs:
  build-feature-app:
    name: Build & Deploy Feature App
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch and Environment Info
        run: |
          # Get repository name as microservice name
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          echo "MICROSERVICE_NAME=${REPO_NAME}" >> $GITHUB_ENV
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
            echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          fi
          
          # Determine environment based on branch or PR target
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.base_ref }}" == "master" ]]; then
              echo "TARGET_ENV=production" >> $GITHUB_ENV
              echo "SOURCE_ENV=staging" >> $GITHUB_ENV
            elif [[ "${{ github.base_ref }}" == "staging" ]]; then
              echo "TARGET_ENV=staging" >> $GITHUB_ENV
              echo "SOURCE_ENV=development" >> $GITHUB_ENV
            fi
          else
            if [[ "${GITHUB_REF#refs/heads/}" == "master" ]]; then
              echo "TARGET_ENV=production" >> $GITHUB_ENV
            elif [[ "${GITHUB_REF#refs/heads/}" == "staging" ]]; then
              echo "TARGET_ENV=staging" >> $GITHUB_ENV
            else
              echo "TARGET_ENV=development" >> $GITHUB_ENV
            fi
          fi

      - name: Generate Version Info
        run: |
          # Get commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          
          # Get commit count for version number
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "COMMIT_COUNT=${COMMIT_COUNT}" >> $GITHUB_ENV
          
          # Generate timestamp
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          
          # Combined version string
          echo "VERSION=${COMMIT_COUNT}-${COMMIT_HASH}" >> $GITHUB_ENV
          
          echo "Generated version info:"
          echo "Commit Hash: ${COMMIT_HASH}"
          echo "Commit Count: ${COMMIT_COUNT}"
          echo "Timestamp: ${TIMESTAMP}"
          echo "Version: ${COMMIT_COUNT}-${COMMIT_HASH}"

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Handle Port Assignment
        run: |
          chmod +x scripts/port_manager.py
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
              # Handle port migration for merged PRs
              echo "Migrating port for merged PR from $SOURCE_ENV to $TARGET_ENV"
              ./scripts/port_manager.py migrate "${{ env.MICROSERVICE_NAME }}/$BRANCH_NAME" "$SOURCE_ENV" "$TARGET_ENV" >> $GITHUB_ENV
              
              # Release the old port from source environment
              ./scripts/port_manager.py release "${{ env.MICROSERVICE_NAME }}/$BRANCH_NAME" "$SOURCE_ENV"
            else
              # For open PRs, just assign a port in the target environment
              echo "Assigning port for PR in $TARGET_ENV"
              ./scripts/port_manager.py assign "${{ env.MICROSERVICE_NAME }}/$BRANCH_NAME" "$TARGET_ENV" >> $GITHUB_ENV
            fi
          else
            # Normal port assignment for push events
            echo "Assigning port for $BRANCH_NAME in $TARGET_ENV"
            ./scripts/port_manager.py assign "${{ env.MICROSERVICE_NAME }}/$BRANCH_NAME" "$TARGET_ENV" >> $GITHUB_ENV
          fi
          
          echo "Assigned port: ${{ env.APP_PORT }}"
          
          # Save any changes to stash
          git stash push -u

          # Switch to master and update ports.json
          git checkout master
          git pull origin master
          git add ports.json
          git commit -m "Update port assignments for ${{ env.MICROSERVICE_NAME }}/$BRANCH_NAME in $TARGET_ENV" || echo "No changes to commit"
          git push origin master || echo "Could not push to master"
          
          # Return to original branch and sync ports.json
          git checkout $BRANCH_NAME
          git checkout master -- ports.json
          
          # Pop stashed changes if any
          git stash pop || echo "No stash to pop"
          
          git add ports.json
          git commit -m "Sync ports.json from master" || echo "No changes to commit"
          git push origin $BRANCH_NAME || echo "Could not push to feature branch"

      - name: Create App Folder and .env
        run: |
          # Create environment directory structure
          echo "Creating environment directory structure..."
          mkdir -p "environments/${{ env.TARGET_ENV }}/${{ env.MICROSERVICE_NAME }}"
          
          # For feature branches in development, create feature-specific directory
          if [[ "${{ env.TARGET_ENV }}" == "development" ]]; then
            APP_DIR="environments/${{ env.TARGET_ENV }}/${{ env.MICROSERVICE_NAME }}/${{ env.BRANCH_NAME }}"
          else
            APP_DIR="environments/${{ env.TARGET_ENV }}/${{ env.MICROSERVICE_NAME }}"
          fi
          
          echo "Creating app folder at: $APP_DIR"
          mkdir -p "$APP_DIR"
          
          # Copy all template files
          echo "Copying template files..."
          cp -r app-template/* "$APP_DIR/"
          
          # Create test-reports directory
          mkdir -p "$APP_DIR/tests/test-reports"
          
          echo "Using assigned port: ${{ env.APP_PORT }}"
          
          # Generate environment-specific .env file
          echo "Generating .env file for $APP_DIR"
          cat <<EOF > "$APP_DIR/.env"
          APP_NAME=${{ env.MICROSERVICE_NAME }}_${{ env.BRANCH_NAME }}
          APP_IMAGE=rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.VERSION }}
          APP_PORT=${{ env.APP_PORT }}
          VIRTUAL_HOST=${{ env.BRANCH_NAME }}.emerginary.com
          VIRTUAL_PORT=${{ env.APP_PORT }}
          REDIS_HOST=redis
          ENABLE_SSL=false
          APP_VERSION=${{ env.VERSION }}
          APP_COMMIT=${{ env.COMMIT_HASH }}
          BUILD_TIMESTAMP=${{ env.TIMESTAMP }}
          ENVIRONMENT=${{ env.TARGET_ENV }}
          EOF
          
          # Create environment README
          cat <<EOF > "$APP_DIR/README.md"
          # ${{ env.MICROSERVICE_NAME }} - ${{ env.TARGET_ENV }} Environment
          
          This directory contains the ${{ env.MICROSERVICE_NAME }} microservice configuration for the ${{ env.TARGET_ENV }} environment.
          
          ## Environment Details
          - Environment: ${{ env.TARGET_ENV }}
          - Port: ${{ env.APP_PORT }}
          - Branch: ${{ env.BRANCH_NAME }}
          - Version: ${{ env.VERSION }}
          
          ## Running the Service
          To run this service:
          \`\`\`bash
          docker compose --env-file environments/${{ env.TARGET_ENV }}/${{ env.MICROSERVICE_NAME }}/.env up -d
          \`\`\`
          
          ## Port Ranges
          - Development: 5000-5999
          - Staging: 6000-6999
          - Production: 7000-7999
          EOF
          
          # List contents to verify
          echo "Verifying directory structure:"
          ls -la "$APP_DIR"
          echo "Verifying tests directory:"
          ls -la "$APP_DIR/tests"

      - name: Install Test Dependencies
        run: |
          cd "$APP_DIR"
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Mandatory Tests
        continue-on-error: true
        run: |
          cd "$APP_DIR"
          echo "Running mandatory tests..."
          if [ -f "tests/test_mandatory.py" ]; then
            echo "Found mandatory tests at tests/test_mandatory.py"
            PYTHONPATH=. python -m pytest tests/test_mandatory.py --cov=. --cov-report=xml:tests/test-reports/coverage-mandatory.xml -v
          else
            echo "ℹ️ No mandatory tests found in tests/ - This is expected for new feature branches"
          fi

      - name: Run Recommended Tests
        continue-on-error: true
        run: |
          cd "$APP_DIR"
          echo "Running recommended tests..."
          if [ -f "tests/test_recommended.py" ]; then
            echo "Found recommended tests at tests/test_recommended.py"
            PYTHONPATH=. python -m pytest tests/test_recommended.py --cov=. --cov-report=xml:tests/test-reports/coverage-recommended.xml -v
          else
            echo "ℹ️ No recommended tests found in tests/ - This is expected for new feature branches"
          fi

      - name: Run Optional Tests
        continue-on-error: true
        run: |
          cd "$APP_DIR"
          echo "Running optional tests..."
          if [ -f "tests/test_optional.py" ]; then
            echo "Found optional tests at tests/test_optional.py"
            PYTHONPATH=. python -m pytest tests/test_optional.py --cov=. --cov-report=xml:tests/test-reports/coverage-optional.xml -v
          else
            echo "ℹ️ No optional tests found in tests/ - This is expected for new feature branches"
          fi

      - name: Generate Test Report
        if: always()
        run: |
          cd "$APP_DIR"
          mkdir -p tests/test-reports
          
          echo "# Test Results Summary" > tests/test-reports/test-report.md
          echo "Generated at: $(date)" >> tests/test-reports/test-report.md
          echo "\n## Environment Information" >> tests/test-reports/test-report.md
          echo "- Environment: ${{ env.TARGET_ENV }}" >> tests/test-reports/test-report.md
          echo "- Microservice: ${{ env.MICROSERVICE_NAME }}" >> tests/test-reports/test-report.md
          echo "- Branch: ${{ env.BRANCH_NAME }}" >> tests/test-reports/test-report.md
          echo "- Port: ${{ env.APP_PORT }}" >> tests/test-reports/test-report.md
          
          echo "\n## Test Status Summary" >> tests/test-reports/test-report.md
          echo "| Test Type | Status |" >> tests/test-reports/test-report.md
          echo "|-----------|--------|" >> tests/test-reports/test-report.md
          echo "| Mandatory | ✅ Not Required (New Branch) |" >> tests/test-reports/test-report.md
          echo "| Recommended | ✅ Not Required (New Branch) |" >> tests/test-reports/test-report.md
          echo "| Optional | ✅ Not Required (New Branch) |" >> tests/test-reports/test-report.md

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ env.TARGET_ENV }}-${{ env.MICROSERVICE_NAME }}
          path: |
            ${{ env.APP_DIR }}/tests/test-reports/
            ${{ env.APP_DIR }}/tests/test-reports/.coverage
            ${{ env.APP_DIR }}/tests/test-reports/coverage*.xml

      - name: Comment PR with Test Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testReport = fs.readFileSync('${{ env.APP_DIR }}/tests/test-reports/test-report.md', 'utf8');
            
            const comment = `## 🧪 Test Results
            
            ${testReport}
            
            [View detailed test reports](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Commit Test Reports
        run: |
          cd "$APP_DIR"
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add tests/test-reports
          git commit -m "Add test reports for ${{ env.MICROSERVICE_NAME }} in ${{ env.TARGET_ENV }}" || echo "No changes to commit"
          git push origin HEAD:${{ env.BRANCH_NAME }}

      - name: Commit and Push App Folder
        run: |
          git add "environments" ports.json
          git commit -m "Update ${{ env.MICROSERVICE_NAME }} in ${{ env.TARGET_ENV }}" || echo "No changes to commit"
          git push origin HEAD:${{ env.BRANCH_NAME }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          # Build with multiple tags
          docker build -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest \
                      -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.VERSION }} \
                      -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.TIMESTAMP }} \
                      --build-arg BUILD_VERSION=${{ env.VERSION }} \
                      --build-arg BUILD_TIMESTAMP=${{ env.TIMESTAMP }} \
                      "$APP_DIR"
          
          # Push all tags
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.VERSION }}
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.TIMESTAMP }}

      - name: Clean Up Workspace After Build
        run: |
          echo "Cleaning up temporary files..."
          rm -rf "./master" || true

  cleanup:
    if: github.event_name == 'delete' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Info
        run: |
          # Get repository name as microservice name
          REPO_NAME=$(basename $(git rev-parse --show-toplevel))
          echo "MICROSERVICE_NAME=${REPO_NAME}" >> $GITHUB_ENV
          
          if [[ "${{ github.event_name }}" == "delete" ]]; then
            echo "BRANCH_NAME=${{ github.event.ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          fi
          
          # Determine environment
          if [[ "$BRANCH_NAME" == "master" ]]; then
            echo "SOURCE_ENV=production" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "staging" ]]; then
            echo "SOURCE_ENV=staging" >> $GITHUB_ENV
          else
            echo "SOURCE_ENV=development" >> $GITHUB_ENV
          fi

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Release Port
        run: |
          git checkout master
          git pull origin master
          
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py release "${{ env.MICROSERVICE_NAME }}/$BRANCH_NAME" "$SOURCE_ENV"
          
          git add ports.json
          git commit -m "Release port for ${{ env.MICROSERVICE_NAME }}/$BRANCH_NAME in $SOURCE_ENV" || echo "No changes to commit"
          git push origin master

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Remove Docker Resources
        run: |
          echo "Cleaning up Docker resources for $BRANCH_NAME..."
          docker rm -f $BRANCH_NAME || true
          docker rmi rohittru/microservicecicdtest_${BRANCH_NAME}:latest || true
          docker rmi rohittru/microservicecicdtest_${BRANCH_NAME}:* || true  # Remove all version tags

          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d '{"username": "${{ secrets.DOCKER_HUB_USERNAME }}", "password": "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          if [ -n "$TOKEN" ]; then
            curl -s -X DELETE \
              -H "Authorization: Bearer $TOKEN" \
              "https://hub.docker.com/v2/repositories/rohittru/microservicecicdtest_${BRANCH_NAME}/"
          fi

      - name: Remove App Folder
        run: |
          echo "Removing app folder from repository..."
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          
          # Remove the environment-specific directory
          if [[ "$SOURCE_ENV" == "development" ]]; then
            git rm -rf "environments/$SOURCE_ENV/${{ env.MICROSERVICE_NAME }}/$BRANCH_NAME" || echo "No app folder to remove"
          else
            git rm -rf "environments/$SOURCE_ENV/${{ env.MICROSERVICE_NAME }}" || echo "No app folder to remove"
          fi
          
          git commit -m "Cleanup: Removed ${{ env.MICROSERVICE_NAME }} from $SOURCE_ENV" || echo "No changes to commit"
          git push origin master || echo "Nothing to push"