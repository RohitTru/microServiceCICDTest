name: Build & Deploy Feature Apps

on:
  push:
    branches:
      - "feature-*"
      - "staging"
      - "master"
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - "staging"
      - "master"
  delete:
    branches:
      - "feature-*"

jobs:
  build-feature-app:
    name: Build & Deploy Feature App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch and Environment Info
        run: |
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          
          # Determine environment based on branch
          if [[ "${GITHUB_REF#refs/heads/}" == "master" ]]; then
            echo "TARGET_ENV=production" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF#refs/heads/}" == "staging" ]]; then
            echo "TARGET_ENV=staging" >> $GITHUB_ENV
          else
            echo "TARGET_ENV=development" >> $GITHUB_ENV
          fi
          
          # For pull requests, determine source and target environments
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "SOURCE_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
            echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
            
            if [[ "${{ github.base_ref }}" == "master" ]]; then
              echo "TARGET_ENV=production" >> $GITHUB_ENV
              echo "SOURCE_ENV=staging" >> $GITHUB_ENV
            elif [[ "${{ github.base_ref }}" == "staging" ]]; then
              echo "TARGET_ENV=staging" >> $GITHUB_ENV
              echo "SOURCE_ENV=development" >> $GITHUB_ENV
            fi
          fi

      - name: Generate Version Info
        run: |
          # Get commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          
          # Get commit count for version number
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "COMMIT_COUNT=${COMMIT_COUNT}" >> $GITHUB_ENV
          
          # Generate timestamp
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          
          # Combined version string
          echo "VERSION=${COMMIT_COUNT}-${COMMIT_HASH}" >> $GITHUB_ENV
          
          echo "Generated version info:"
          echo "Commit Hash: ${COMMIT_HASH}"
          echo "Commit Count: ${COMMIT_COUNT}"
          echo "Timestamp: ${TIMESTAMP}"
          echo "Version: ${COMMIT_COUNT}-${COMMIT_HASH}"

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Handle Port Assignment
        run: |
          chmod +x scripts/port_manager.py
          
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            # Handle port migration for merged PRs
            echo "Migrating port for merged PR from $SOURCE_ENV to $TARGET_ENV"
            ./scripts/port_manager.py migrate "$SOURCE_BRANCH" "$SOURCE_ENV" "$TARGET_ENV" >> $GITHUB_ENV
            
            # Release the old port from source environment
            ./scripts/port_manager.py release "$SOURCE_BRANCH" "$SOURCE_ENV"
          else
            # Normal port assignment for push events
            echo "Assigning port for $BRANCH_NAME in $TARGET_ENV"
            ./scripts/port_manager.py assign "$BRANCH_NAME" "$TARGET_ENV" >> $GITHUB_ENV
          fi
          
          echo "Assigned port: ${{ env.APP_PORT }}"
          
          # Commit port changes to master
          git checkout master
          git pull origin master
          git add ports.json
          git commit -m "Update port assignments for $BRANCH_NAME in $TARGET_ENV" || echo "No changes to commit"
          git push origin master
          
          # Return to original branch
          git checkout $BRANCH_NAME

      - name: Create App Folder and .env
        run: |
          echo "Creating app folder for ${{ env.BRANCH_NAME }}"
          mkdir -p "${{ env.BRANCH_NAME }}"
          
          # First, check if we already have a tests directory in the feature branch
          if [ -d "${{ env.BRANCH_NAME }}/tests" ]; then
            # Backup existing tests
            echo "Backing up existing tests from ${{ env.BRANCH_NAME }}/tests"
            cp -r "${{ env.BRANCH_NAME }}/tests" "${{ env.BRANCH_NAME }}/tests_backup"
          fi
          
          # Copy template files, excluding tests if they exist in feature branch
          if [ -d "${{ env.BRANCH_NAME }}/tests" ]; then
            echo "Preserving existing tests in ${{ env.BRANCH_NAME }}/tests"
            rsync -av --exclude 'microservice-env-template.env' --exclude 'tests/' ./app-template/ ./${{ env.BRANCH_NAME }}/
          else
            echo "No existing tests found, copying template tests"
            rsync -av --exclude 'microservice-env-template.env' ./app-template/ ./${{ env.BRANCH_NAME }}/
          fi
          
          # Restore tests if they were backed up
          if [ -d "${{ env.BRANCH_NAME }}/tests_backup" ]; then
            echo "Restoring tests from backup"
            rm -rf "${{ env.BRANCH_NAME }}/tests"
            mv "${{ env.BRANCH_NAME }}/tests_backup" "${{ env.BRANCH_NAME }}/tests"
          fi

          echo "Using assigned port: ${{ env.APP_PORT }}"

          echo "Generating .env file for ${{ env.BRANCH_NAME }}"
          cat <<EOF > ./${{ env.BRANCH_NAME }}/.env
          APP_NAME=${{ env.BRANCH_NAME }}
          APP_IMAGE=rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.VERSION }}
          APP_PORT=${{ env.APP_PORT }}
          VIRTUAL_HOST=${{ env.BRANCH_NAME }}.emerginary.com
          VIRTUAL_PORT=${{ env.APP_PORT }}
          REDIS_HOST=redis
          ENABLE_SSL=false
          APP_VERSION=${{ env.VERSION }}
          APP_COMMIT=${{ env.COMMIT_HASH }}
          BUILD_TIMESTAMP=${{ env.TIMESTAMP }}
          EOF

      - name: Install Test Dependencies
        run: |
          cd ${{ env.BRANCH_NAME }}
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Mandatory Tests
        run: |
          cd ${{ env.BRANCH_NAME }}
          echo "Running mandatory tests from feature branch..."
          # Find and run mandatory tests from the feature branch
          if [ -f "tests/test_mandatory.py" ]; then
            echo "Found mandatory tests at tests/test_mandatory.py"
            PYTHONPATH=. python -m pytest tests/test_mandatory.py --cov=. --cov-report=xml:tests/test-reports/coverage-mandatory.xml -v || exit 1
          else
            echo "❌ No mandatory tests found in tests/"
            exit 1
          fi

      - name: Run Recommended Tests
        continue-on-error: true
        run: |
          cd ${{ env.BRANCH_NAME }}
          echo "Running recommended tests from feature branch..."
          # Find and run recommended tests from the feature branch
          if [ -f "tests/test_recommended.py" ]; then
            echo "Found recommended tests at tests/test_recommended.py"
            PYTHONPATH=. python -m pytest tests/test_recommended.py --cov=. --cov-report=xml:tests/test-reports/coverage-recommended.xml -v
          else
            echo "⚠️ No recommended tests found in tests/"
          fi

      - name: Run Optional Tests
        continue-on-error: true
        run: |
          cd ${{ env.BRANCH_NAME }}
          echo "Running optional tests from feature branch..."
          # Find and run optional tests from the feature branch
          if [ -f "tests/test_optional.py" ]; then
            echo "Found optional tests at tests/test_optional.py"
            PYTHONPATH=. python -m pytest tests/test_optional.py --cov=. --cov-report=xml:tests/test-reports/coverage-optional.xml -v
          else
            echo "ℹ️ No optional tests found in tests/"
          fi

      - name: Generate Test Report
        if: always()
        run: |
          cd ${{ env.BRANCH_NAME }}
          mkdir -p tests/test-reports
          
          echo "# Test Results Summary" > tests/test-reports/test-report.md
          echo "Generated at: $(date)" >> tests/test-reports/test-report.md
          echo "\n## Overview" >> tests/test-reports/test-report.md
          
          # Run and report mandatory tests
          echo "\n### 🔒 Mandatory Tests" >> tests/test-reports/test-report.md
          echo "\`\`\`" >> tests/test-reports/test-report.md
          if [ -f "tests/test_mandatory.py" ]; then
            PYTHONPATH=. python -m pytest tests/test_mandatory.py -v --no-cov 2>&1 | tee -a tests/test-reports/test-report.md
            MANDATORY_EXIT=${PIPESTATUS[0]}
          else
            echo "❌ No mandatory tests found in tests/" | tee -a tests/test-reports/test-report.md
            MANDATORY_EXIT=1
          fi
          echo "\`\`\`" >> tests/test-reports/test-report.md
          
          # Run and report recommended tests
          echo "\n### 📝 Recommended Tests" >> tests/test-reports/test-report.md
          echo "\`\`\`" >> tests/test-reports/test-report.md
          if [ -f "tests/test_recommended.py" ]; then
            PYTHONPATH=. python -m pytest tests/test_recommended.py -v --no-cov 2>&1 | tee -a tests/test-reports/test-report.md
            RECOMMENDED_EXIT=${PIPESTATUS[0]}
          else
            echo "⚠️ No recommended tests found in tests/" | tee -a tests/test-reports/test-report.md
            RECOMMENDED_EXIT=0
          fi
          echo "\`\`\`" >> tests/test-reports/test-report.md
          
          # Run and report optional tests
          echo "\n### ⭐ Optional Tests" >> tests/test-reports/test-report.md
          echo "\`\`\`" >> tests/test-reports/test-report.md
          if [ -f "tests/test_optional.py" ]; then
            PYTHONPATH=. python -m pytest tests/test_optional.py -v --no-cov 2>&1 | tee -a tests/test-reports/test-report.md
            OPTIONAL_EXIT=${PIPESTATUS[0]}
          else
            echo "ℹ️ No optional tests found in tests/" | tee -a tests/test-reports/test-report.md
            OPTIONAL_EXIT=0
          fi
          echo "\`\`\`" >> tests/test-reports/test-report.md
          
          # Generate coverage reports
          echo "\n## Coverage Reports" >> tests/test-reports/test-report.md
          
          echo "\n### Mandatory Tests Coverage" >> tests/test-reports/test-report.md
          echo "\`\`\`" >> tests/test-reports/test-report.md
          coverage report >> tests/test-reports/test-report.md
          echo "\`\`\`" >> tests/test-reports/test-report.md
          
          # Add test status summary
          echo "\n## Test Status Summary" >> tests/test-reports/test-report.md
          echo "| Test Type | Status |" >> tests/test-reports/test-report.md
          echo "|-----------|--------|" >> tests/test-reports/test-report.md
          if [ $MANDATORY_EXIT -eq 0 ]; then
            echo "| Mandatory | ✅ Passed |" >> tests/test-reports/test-report.md
          else
            echo "| Mandatory | ❌ Failed |" >> tests/test-reports/test-report.md
          fi
          if [ $RECOMMENDED_EXIT -eq 0 ]; then
            echo "| Recommended | ✅ Passed |" >> tests/test-reports/test-report.md
          else
            echo "| Recommended | ⚠️ Some tests failed |" >> tests/test-reports/test-report.md
          fi
          if [ $OPTIONAL_EXIT -eq 0 ]; then
            echo "| Optional | ✅ Passed |" >> tests/test-reports/test-report.md
          else
            echo "| Optional | ℹ️ Some tests failed |" >> tests/test-reports/test-report.md
          fi
          
          # Move .coverage file if it exists
          if [ -f ".coverage" ]; then
            mv .coverage tests/test-reports/.coverage
          fi
          
          # Exit with error if mandatory tests failed
          if [ $MANDATORY_EXIT -ne 0 ]; then
            echo "❌ Mandatory tests failed. Please fix before merging."
            exit 1
          fi

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            ${{ env.BRANCH_NAME }}/tests/test-reports/
            ${{ env.BRANCH_NAME }}/tests/test-reports/.coverage
            ${{ env.BRANCH_NAME }}/tests/test-reports/coverage*.xml

      - name: Comment PR with Test Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testReport = fs.readFileSync('${{ env.BRANCH_NAME }}/tests/test-reports/test-report.md', 'utf8');
            
            const comment = `## 🧪 Test Results
            
            ${testReport}
            
            [View detailed test reports](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Commit Test Reports
        run: |
          cd ${{ env.BRANCH_NAME }}
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add tests/test-reports
          git commit -m "Add test reports for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin HEAD:${{ env.BRANCH_NAME }}

      - name: Commit and Push App Folder
        run: |
          git add "${{ env.BRANCH_NAME }}" ports.json
          git commit -m "Add app folder for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin HEAD:${{ env.BRANCH_NAME }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          # Build with multiple tags
          docker build -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest \
                      -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.VERSION }} \
                      -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.TIMESTAMP }} \
                      --build-arg BUILD_VERSION=${{ env.VERSION }} \
                      --build-arg BUILD_TIMESTAMP=${{ env.TIMESTAMP }} \
                      ./${{ env.BRANCH_NAME }}
          
          # Push all tags
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.VERSION }}
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.TIMESTAMP }}

      - name: Clean Up Workspace After Build
        run: |
          echo "Cleaning up temporary files..."
          rm -rf "./${{ env.BRANCH_NAME }}" || true
          rm -rf "./master" || true

  cleanup:
    if: github.event_name == 'delete' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == false)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Info
        run: |
          if [[ "${{ github.event_name }}" == "delete" ]]; then
            echo "BRANCH_NAME=${{ github.event.ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          fi
          
          # Determine environment
          if [[ "$BRANCH_NAME" == "master" ]]; then
            echo "SOURCE_ENV=production" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "staging" ]]; then
            echo "SOURCE_ENV=staging" >> $GITHUB_ENV
          else
            echo "SOURCE_ENV=development" >> $GITHUB_ENV
          fi

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Release Port
        run: |
          git checkout master
          git pull origin master
          
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py release "$BRANCH_NAME" "$SOURCE_ENV"
          
          git add ports.json
          git commit -m "Release port for $BRANCH_NAME in $SOURCE_ENV" || echo "No changes to commit"
          git push origin master

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Remove Docker Resources
        run: |
          echo "Cleaning up Docker resources for $BRANCH_NAME..."
          docker rm -f $BRANCH_NAME || true
          docker rmi rohittru/microservicecicdtest_${BRANCH_NAME}:latest || true
          docker rmi rohittru/microservicecicdtest_${BRANCH_NAME}:* || true  # Remove all version tags

          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d '{"username": "${{ secrets.DOCKER_HUB_USERNAME }}", "password": "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          if [ -n "$TOKEN" ]; then
            curl -s -X DELETE \
              -H "Authorization: Bearer $TOKEN" \
              "https://hub.docker.com/v2/repositories/rohittru/microservicecicdtest_${BRANCH_NAME}/"
          fi

      - name: Remove App Folder from GitHub Repo
        run: |
          echo "Removing app folder from repository..."
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git rm -rf "./${BRANCH_NAME}" || echo "No app folder to remove"
          git commit -m "Cleanup: Removed app folder for $BRANCH_NAME" || echo "No changes to commit"
          git push origin master || echo "Nothing to push"