name: Build & Deploy Feature Apps

on:
  push:
    branches:
      - "feature-*"
  delete:
    branches:
      - "feature-*"

jobs:
  build-feature-app:
    name: Build & Deploy Feature App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Generate Version Info
        run: |
          # Get commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV
          
          # Get commit count for version number
          COMMIT_COUNT=$(git rev-list --count HEAD)
          echo "COMMIT_COUNT=${COMMIT_COUNT}" >> $GITHUB_ENV
          
          # Generate timestamp
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          
          # Combined version string
          echo "VERSION=${COMMIT_COUNT}-${COMMIT_HASH}" >> $GITHUB_ENV
          
          echo "Generated version info:"
          echo "Commit Hash: ${COMMIT_HASH}"
          echo "Commit Count: ${COMMIT_COUNT}"
          echo "Timestamp: ${TIMESTAMP}"
          echo "Version: ${COMMIT_COUNT}-${COMMIT_HASH}"

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Update Port Assignments
        run: |
          # Switch to master to update ports.json
          git checkout master
          
          # Ensure we have latest master
          git pull origin master
          
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py assign ${{ env.BRANCH_NAME }} >> $GITHUB_ENV
          echo "Assigned port: ${{ env.APP_PORT }}"
          
          # Commit and push ports.json to master
          git add ports.json
          git commit -m "Update port assignments for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin master
          
          # Switch back to feature branch
          git checkout ${{ env.BRANCH_NAME }}
          # Ensure feature branch has updated ports.json
          git checkout master -- ports.json

      - name: Create App Folder and .env
        run: |
          echo "Creating app folder for ${{ env.BRANCH_NAME }}"
          mkdir -p "${{ env.BRANCH_NAME }}"
          rsync -av --exclude 'microservice-env-template.env' ./app-template/ ./${{ env.BRANCH_NAME }}/

          echo "Using assigned port: ${{ env.APP_PORT }}"

          echo "Generating .env file for ${{ env.BRANCH_NAME }}"
          cat <<EOF > ./${{ env.BRANCH_NAME }}/.env
          APP_NAME=${{ env.BRANCH_NAME }}
          APP_IMAGE=rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.VERSION }}
          APP_PORT=${{ env.APP_PORT }}
          VIRTUAL_HOST=${{ env.BRANCH_NAME }}.emerginary.com
          VIRTUAL_PORT=${{ env.APP_PORT }}
          REDIS_HOST=redis
          ENABLE_SSL=false
          APP_VERSION=${{ env.VERSION }}
          APP_COMMIT=${{ env.COMMIT_HASH }}
          BUILD_TIMESTAMP=${{ env.TIMESTAMP }}
          EOF

      - name: Install Test Dependencies
        run: |
          cd ${{ env.BRANCH_NAME }}
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Mandatory Tests
        run: |
          cd ${{ env.BRANCH_NAME }}
          echo "Running mandatory tests..."
          python -m pytest tests/test_mandatory.py --cov=. --cov-report=xml:tests/test-reports/coverage-mandatory.xml -v || exit 1

      - name: Run Recommended Tests
        continue-on-error: true
        run: |
          cd ${{ env.BRANCH_NAME }}
          echo "Running recommended tests..."
          python -m pytest tests/test_recommended.py --cov=. --cov-report=xml:tests/test-reports/coverage-recommended.xml -v

      - name: Run Optional Tests
        continue-on-error: true
        run: |
          cd ${{ env.BRANCH_NAME }}
          echo "Running optional tests..."
          python -m pytest tests/test_optional.py --cov=. --cov-report=xml:tests/test-reports/coverage-optional.xml -v

      - name: Generate Test Report
        if: always()
        run: |
          cd ${{ env.BRANCH_NAME }}
          mkdir -p tests/test-reports
          echo "# Test Results Summary" > tests/test-reports/test-report.md
          echo "## Mandatory Tests" >> tests/test-reports/test-report.md
          python -m pytest tests/test_mandatory.py -v --no-cov >> tests/test-reports/test-report.md || true
          
          echo -e "\n## Recommended Tests" >> tests/test-reports/test-report.md
          python -m pytest tests/test_recommended.py -v --no-cov >> tests/test-reports/test-report.md || true
          
          echo -e "\n## Optional Tests" >> tests/test-reports/test-report.md
          python -m pytest tests/test_optional.py -v --no-cov >> tests/test-reports/test-report.md || true
          
          # Move .coverage file if it exists
          if [ -f ".coverage" ]; then
            mv .coverage tests/test-reports/.coverage
          fi

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            ${{ env.BRANCH_NAME }}/tests/test-reports/
            ${{ env.BRANCH_NAME }}/tests/test-reports/.coverage
            ${{ env.BRANCH_NAME }}/tests/test-reports/coverage*.xml

      - name: Commit Test Reports
        run: |
          cd ${{ env.BRANCH_NAME }}
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add tests/test-reports
          git commit -m "Add test reports for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin HEAD:${{ env.BRANCH_NAME }}

      - name: Commit and Push App Folder
        run: |
          git add "${{ env.BRANCH_NAME }}" ports.json
          git commit -m "Add app folder for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin HEAD:${{ env.BRANCH_NAME }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          # Build with multiple tags
          docker build -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest \
                      -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.VERSION }} \
                      -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.TIMESTAMP }} \
                      --build-arg BUILD_VERSION=${{ env.VERSION }} \
                      --build-arg BUILD_TIMESTAMP=${{ env.TIMESTAMP }} \
                      ./${{ env.BRANCH_NAME }}
          
          # Push all tags
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.VERSION }}
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:${{ env.TIMESTAMP }}

      - name: Clean Up Workspace After Build
        run: |
          echo "Cleaning up temporary files..."
          rm -rf "./${{ env.BRANCH_NAME }}" || true
          rm -rf "./master" || true

      - name: Move Coverage File
        if: always()
        run: |
          cd ${{ env.BRANCH_NAME }}
          if [ -f .coverage ]; then
            mv .coverage test-reports/.coverage
          fi

  cleanup:
    if: github.event_name == 'delete'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Extract Branch Name
        run: echo "BRANCH_NAME=${{ github.event.ref }}" >> $GITHUB_ENV

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Release Port
        run: |
          # Ensure we're on master
          git checkout master
          git pull origin master
          
          chmod +x scripts/port_manager.py
          ./scripts/port_manager.py release ${{ env.BRANCH_NAME }}
          
          # Commit the updated ports.json after port release
          git add ports.json
          git commit -m "Release port for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin master

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Remove Docker Resources
        run: |
          echo "Cleaning up Docker resources for ${{ env.BRANCH_NAME }}..."
          docker rm -f ${{ env.BRANCH_NAME }} || true
          docker rmi rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest || true
          docker rmi rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:* || true  # Remove all version tags

          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d '{"username": "${{ secrets.DOCKER_HUB_USERNAME }}", "password": "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          if [ -n "$TOKEN" ]; then
            curl -s -X DELETE \
              -H "Authorization: Bearer $TOKEN" \
              "https://hub.docker.com/v2/repositories/rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}/"
          fi

      - name: Remove App Folder from GitHub Repo
        run: |
          echo "Removing app folder from repository..."
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git rm -rf "./${{ env.BRANCH_NAME }}" || echo "No app folder to remove"
          git commit -m "Cleanup: Removed app folder for ${{ env.BRANCH_NAME }}" || echo "No changes to commit"
          git push origin master || echo "Nothing to push"