name: Build & Deploy Feature Apps

on:
  push:
    branches:
      - "feature-*"
  delete:
    branches:
      - "feature-*"

jobs:
  build-feature-app:
    name: Build & Deploy Feature App
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Ensure Docker Network Exists
      - name: Ensure Docker Network Exists
        run: |
          docker network inspect app-network || docker network create app-network

      # 3. Extract Branch Name
      - name: Extract Branch Name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      # 4. Create App Folder and Generate .env
      - name: Create App Folder from Template and Generate .env
        run: |
          if [ ! -d "./${{ env.BRANCH_NAME }}" ]; then
            echo "Creating app folder for ${{ env.BRANCH_NAME }}"
            cp -r ./app-template ./${{ env.BRANCH_NAME }}
          fi

          # Generate .env file for the app
          cat <<EOF > ./${{ env.BRANCH_NAME }}/.env
          APP_NAME=${{ env.BRANCH_NAME }}
          APP_IMAGE=rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest
          APP_PORT=$((5000 + RANDOM % 1000))
          REDIS_HOST=redis
          EOF

          echo "Generated .env file for ${{ env.BRANCH_NAME }}:"
          cat ./${{ env.BRANCH_NAME }}/.env

      # 5. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 6. Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest \
          --build-arg BUILD_TIMESTAMP=$(date +'%Y%m%d%H%M%S') ./${{ env.BRANCH_NAME }}

      # 7. Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker push rohittru/microservicecicdtest_${{ env.BRANCH_NAME }}:latest

  # Remove Sandbox when Branch is Deleted
  cleanup:
    if: github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - name: Remove Docker Image and Sandbox
        run: |
          BRANCH_NAME=${{ github.event.ref }}
          echo "Cleaning up sandbox for $BRANCH_NAME"
          docker rm -f ${BRANCH_NAME} || true
          docker rmi rohittru/microservicecicdtest_${BRANCH_NAME}:latest || true
